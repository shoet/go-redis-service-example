// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package handler

import (
	"context"
	"sync"
)

// Ensure, that LoginServiceMock does implement LoginService.
// If this is not the case, regenerate this file with moq.
var _ LoginService = &LoginServiceMock{}

// LoginServiceMock is a mock implementation of LoginService.
//
//	func TestSomethingThatUsesLoginService(t *testing.T) {
//
//		// make and configure a mocked LoginService
//		mockedLoginService := &LoginServiceMock{
//			LoginFunc: func(ctx context.Context, username string) error {
//				panic("mock out the Login method")
//			},
//		}
//
//		// use mockedLoginService in code that requires LoginService
//		// and then make assertions.
//
//	}
type LoginServiceMock struct {
	// LoginFunc mocks the Login method.
	LoginFunc func(ctx context.Context, username string) error

	// calls tracks calls to the methods.
	calls struct {
		// Login holds details about calls to the Login method.
		Login []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Username is the username argument value.
			Username string
		}
	}
	lockLogin sync.RWMutex
}

// Login calls LoginFunc.
func (mock *LoginServiceMock) Login(ctx context.Context, username string) error {
	if mock.LoginFunc == nil {
		panic("LoginServiceMock.LoginFunc: method is nil but LoginService.Login was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Username string
	}{
		Ctx:      ctx,
		Username: username,
	}
	mock.lockLogin.Lock()
	mock.calls.Login = append(mock.calls.Login, callInfo)
	mock.lockLogin.Unlock()
	return mock.LoginFunc(ctx, username)
}

// LoginCalls gets all the calls that were made to Login.
// Check the length with:
//
//	len(mockedLoginService.LoginCalls())
func (mock *LoginServiceMock) LoginCalls() []struct {
	Ctx      context.Context
	Username string
} {
	var calls []struct {
		Ctx      context.Context
		Username string
	}
	mock.lockLogin.RLock()
	calls = mock.calls.Login
	mock.lockLogin.RUnlock()
	return calls
}
